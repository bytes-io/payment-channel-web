<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Payment Channel</title>
    <!-- Bootstrap core CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">
    <style>
      body {
        padding-left: 50px;
        padding-right: 50px;
      }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
  </head>
  <body>
    <div class="container-fluid">
      <div class="row">
        <h1 class="page-header">Payment Channel Demo</h1>
      </div>
      <div class="row">
        <div class="btn-group btn-toggle">
          <button id="start-btn" onclick="startChannel()" class="btn btn-success active" data-toggle="collapse" data-target="#collapsible">Start Channel</button>
          <button id="close-btn" onclick="closeChannel()" class="btn btn-default disabled" data-toggle="collapse" data-target="#collapsible">Close Channel</button>
        </div>
        <script>
          $('.btn-toggle').click(function() {
            $(this).find('.btn').toggleClass('active');

            if ($(this).find('.btn-success').length>0) {
              $(this).find('.btn').toggleClass('btn-success');
              $(this).find('.btn').prop('disabled', false);
            }


            $(this).find('.btn').toggleClass('btn-default');
          });
        </script>
        <div class="well collapse" id="collapsible"> 
          Start sending transactions
        </div>
        <hr>
      </div>
      <br />
      <div class="row">
        <div>
          <div class="panel panel-primary">
            <div class="panel-heading">
              <h2 class="panel-title">
                Transactions
              </h2>
            </div>
            <ul class="list-group">
              <li class="list-group-item">
                <h4>Sender # <span id="senderAddress"></span> (balance:: <span id="senderBalance"></span>)</h4>
                <table class="table table-hover">
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>Tx Hash</th>
                      <th>Amount</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td></td>
                      <td></td>
                      <td></td>
                    </tr>
                  </tbody>
                </table>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/gh/ethereum/web3.js@1.0.0-beta.34/dist/web3.min.js"></script>
    <script>
      const PaymentChannelArtifact = <%- JSON.stringify(paymentChannelArtifact) %>;
      let paymentChannel;
      let sender;
      let recipient;

      function executeDemo() {
        paymentChannel = new web3.eth.Contract(PaymentChannelArtifact.abi);
        paymentChannel.setProvider(web3.currentProvider);
        web3.eth.getAccounts()
          .then(accs => {
            sender = accs[0];
            recipient = accs[1];
            displayAccts(sender, 'sender');
      
            // return this.deployContract()
            paymentChannel.options.address = '0x7C83b4891e51EAa0d080fa8521B4c3FAE19b17BC';
            return paymentChannel;
          })
          .then(newInstance => {
            paymentChannel = newInstance;
      
            return signPayment(0)
              .then((message) => {
                return paymentChannel.methods.close(0, message)
                  .send({ from: sender, gas: 1500000 })
              })
          })
          .then(() => {
            console.log("Channel closed")
          });
      }

      function deployContract() {
        const now = new Date();
        const twoHoursLater = new Date(now.getTime() + (2 * 1000 * 60 * 60)).getTime() / 1000;

        return paymentChannel.deploy({
          data: PaymentChannelArtifact.bytecode,
          arguments: [recipient, twoHoursLater]
        })
        .send({ from: sender, gas: 1500000 })
      }

      function signPayment(amount) {
        return $.ajax({
          url: '/sign-payment',
          data: {
            contractaddress: paymentChannel.options.address,
            amount,
            address: sender
          }
        })
        .then(res => res.message);
      }

      function startChannel() {
        if (typeof web3 === 'undefined') {
          alert("Unable to connect to web3");
          return;
        }
        executeDemo();
      }

      function displayAccts (address, handler) {
        web3.eth.getBalance(address)
          .then((balance) => {
            $(`#${handler}Address`).text(address);
            $(`#${handler}Balance`).text(web3.utils.fromWei(balance, 'ether') + ' ETH');
          });
      }

      window.addEventListener('load', () => {
        if (typeof web3 !== 'undefined') {
          web3 = new Web3(web3.currentProvider);
        } else {
          web3 = new Web3(new Web3.providers.HttpProvider('http://127.0.0.1:7545'));
        }
      });
    </script>
  </body>
</html>
